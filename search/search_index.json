{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SolarPy Datenerfassung f\u00fcr Solaranlage mit Fronius Wechselrichter und Fronius IG Interface Card/Box Das Programm ist gedacht, um mittels eines Raspberry Pi's die Daten der Wechselrichter \u00fcber das interne Netzwerk zur Verf\u00fcgung zu stellen. Es kann aber im Prinzip jeder Rechner -ob Linux oder Windows - verwendet werden. Es besteht die M\u00f6glichkeit die Daten in einer MySQL und/oder InfluxDB Datenbank zu archivieren. \u00dcber eine REST-API Schnittstelle oder \u00fcber MQTT k\u00f6nnen die Daten abgefragt werden. Andere Ein-/Ausgabeschnittstellen sind leicht implementierbar. Das Programm ist komplett in Python geschrieben und ben\u00f6tigt keine Oberfl\u00e4che. Das Programm l\u00e4sst sich umfangreich \u00fcber eine CFG-Datei konfigurieren.","title":"Home"},{"location":"#solarpy","text":"","title":"SolarPy"},{"location":"#datenerfassung-fur-solaranlage-mit-fronius-wechselrichter-und-fronius-ig-interface-cardbox","text":"Das Programm ist gedacht, um mittels eines Raspberry Pi's die Daten der Wechselrichter \u00fcber das interne Netzwerk zur Verf\u00fcgung zu stellen. Es kann aber im Prinzip jeder Rechner -ob Linux oder Windows - verwendet werden. Es besteht die M\u00f6glichkeit die Daten in einer MySQL und/oder InfluxDB Datenbank zu archivieren. \u00dcber eine REST-API Schnittstelle oder \u00fcber MQTT k\u00f6nnen die Daten abgefragt werden. Andere Ein-/Ausgabeschnittstellen sind leicht implementierbar. Das Programm ist komplett in Python geschrieben und ben\u00f6tigt keine Oberfl\u00e4che. Das Programm l\u00e4sst sich umfangreich \u00fcber eine CFG-Datei konfigurieren.","title":"Datenerfassung f\u00fcr Solaranlage mit Fronius Wechselrichter und Fronius IG Interface Card/Box"},{"location":"application/","text":"Anwendung SolarPy kann sich die Daten der PV Anlage aus verschiedenen Quellen holen. F\u00fcr die Ausgabe stehen verschiedene Module zur Verf\u00fcgung Quellen Ausgaben","title":"Application"},{"location":"application/#anwendung","text":"SolarPy kann sich die Daten der PV Anlage aus verschiedenen Quellen holen. F\u00fcr die Ausgabe stehen verschiedene Module zur Verf\u00fcgung Quellen Ausgaben","title":"Anwendung"},{"location":"configuration/","text":"Konfiguration SolarPy kann umfangreich konfiguriert werden. Alle m\u00f6glichen Parameter sind sowohl als Commandline Argument, als auch in der Konfigurationsdatei einstellbar. Commandline Arguments >python ./SolarPy.py --help usage: SolarPy.py [-h] [-cf CONFIGFILE] [-lf LOGFILE] [-lbc LOGBACKUPCOUNT] [-ds DATASOURCE] [-c COMPORT] [-rh RESTHOST] [-ru RESTURL] [-hse HTTPSRVENABLED] [-hsa HTTPSRVADDRESS] [-hsp HTTPSRVPORT] [-hsd HTTPSRVDIRECTORY] [-ixen INFLUXENABLED] [-ixh INFLUXHOST] [-ixp INFLUXPORT] [-ixu INFLUXUSER] [-ixpw INFLUXPASSWORD] [-idb INFLUXDATABASE] [-ii INFLUXINTERVAL] [-mysen MYSQLENABLED] [-mysh MYSQLHOST] [-mysp MYSQLPORT] [-mysu MYSQLUSER] [-myspw MYSQLPASSWORD] [-mysdb MYSQLDATABASE] [-myst MYSQLTABLENAME] [-mysi MYSQLINTERVAL] [-men MQTTENABLED] [-mb MQTTBROKER] [-mp MQTTPORT] [-mid MQTTID] [-mu MQTTUSER] [-mpw MQTTPASSWORD] [-mbt MQTTBASETOPIC] [-mbi MQTTINTERVAL] [-mka MQTTKEEPALIVE] [-wcen WEBCAMENABLED] [-wcurl WEBCAMURL] [-wcu WEBCAMUSERNAME] [-wcpw WEBCAMPASSWORD] [-wci WEBCAMSAVEINTERVAL] [-wct WEBCAMTTFFILE] [-wcsd WEBCAMSAVEDIRECTORY] [-wten WEATHERENABLE] [-wturl WEATHERURL] [-wtuser WEATHERUSER] [-wtpw WEATHERPASSWORD] [-wtheight WEATHERSTATIONHEIGHT] optional arguments: -h, --help show this help message and exit -cf CONFIGFILE, --configfile CONFIGFILE Name and path for config file -lf LOGFILE, --logfile LOGFILE Name and path for log file -lbc LOGBACKUPCOUNT, --logbackupcount LOGBACKUPCOUNT How much logfiles to keep -ds DATASOURCE, --datasource DATASOURCE How to get PV-Data [restapi, ifcardeasy, simulation] -c COMPORT, --comport COMPORT On witch ComPort is the IFCard connected -rh RESTHOST, --resthost RESTHOST Host address for RESTApi -ru RESTURL, --resturl RESTURL URL for RESTApi -hse HTTPSRVENABLED, --httpsrvenabled HTTPSRVENABLED http server enabled -hsa HTTPSRVADDRESS, --httpsrvaddress HTTPSRVADDRESS http server address -hsp HTTPSRVPORT, --httpsrvport HTTPSRVPORT http server port -hsd HTTPSRVDIRECTORY, --httpsrvdirectory HTTPSRVDIRECTORY http server directory -ixen INFLUXENABLED, --influxenabled INFLUXENABLED influxdb enabled [True,False] -ixh INFLUXHOST, --influxhost INFLUXHOST influxdb url/hostname -ixp INFLUXPORT, --influxport INFLUXPORT influxdb port -ixu INFLUXUSER, --influxuser INFLUXUSER influxdb username -ixpw INFLUXPASSWORD, --influxpassword INFLUXPASSWORD influxdb password -idb INFLUXDATABASE, --influxdatabase INFLUXDATABASE influxdb database name -ii INFLUXINTERVAL, --influxinterval INFLUXINTERVAL influxdb data send interval -mysen MYSQLENABLED, --mysqlenabled MYSQLENABLED MySQL enabled [True, False] -mysh MYSQLHOST, --mysqlhost MYSQLHOST MySQL url/host -mysp MYSQLPORT, --mysqlport MYSQLPORT MySQL port -mysu MYSQLUSER, --mysqluser MYSQLUSER MySQL username -myspw MYSQLPASSWORD, --mysqlpassword MYSQLPASSWORD MySQL password -mysdb MYSQLDATABASE, --mysqldatabase MYSQLDATABASE MySQL database name -myst MYSQLTABLENAME, --mysqltablename MYSQLTABLENAME MySQL Table name -mysi MYSQLINTERVAL, --mysqlinterval MYSQLINTERVAL MySQL send interval -men MQTTENABLED, --mqttenabled MQTTENABLED mqtt enabled [True,False] -mb MQTTBROKER, --mqttbroker MQTTBROKER url for mqttbroker -mp MQTTPORT, --mqttport MQTTPORT port for mqttbroker -mid MQTTID, --mqttid MQTTID id for mqttbroker -mu MQTTUSER, --mqttuser MQTTUSER user for mqttbroker -mpw MQTTPASSWORD, --mqttpassword MQTTPASSWORD password for mqttbroker -mbt MQTTBASETOPIC, --mqttbasetopic MQTTBASETOPIC basetopic for mqtt -mbi MQTTINTERVAL, --mqttinterval MQTTINTERVAL data send interval for mqtt -mka MQTTKEEPALIVE, --mqttkeepalive MQTTKEEPALIVE keepalive time for mqtt -wcen WEBCAMENABLED, --webcamenabled WEBCAMENABLED webcam processing enabled -wcurl WEBCAMURL, --webcamurl WEBCAMURL webcam URL -wcu WEBCAMUSERNAME, --webcamusername WEBCAMUSERNAME webcam username -wcpw WEBCAMPASSWORD, --webcampassword WEBCAMPASSWORD webcam password -wci WEBCAMSAVEINTERVAL, --webcamsaveinterval WEBCAMSAVEINTERVAL webcam interval to save pictures -wct WEBCAMTTFFILE, --webcamttffile WEBCAMTTFFILE webcam True-Type font file -wcsd WEBCAMSAVEDIRECTORY, --webcamsavedirectory WEBCAMSAVEDIRECTORY webcam directory for saved pictures -wten WEATHERENABLE, --weatherenable WEATHERENABLE Get weather enabled -wturl WEATHERURL, --weatherurl WEATHERURL Get weather data url -wtuser WEATHERUSER, --weatheruser WEATHERUSER Get weather username -wtpw WEATHERPASSWORD, --weatherpassword WEATHERPASSWORD Get weather password -wtheight WEATHERSTATIONHEIGHT, --weatherstationheight WEATHERSTATIONHEIGHT Height of the weatherstation over NN Konfigurationsdatei Als Standard Name f\u00fcr die Konfigurationsdatei wird \"solarpy.cfg\" im gleichen Verzeichnis wie die Programmdatei verwendet. Per Kommandozeile kann dieser jedoch ge\u00e4ndert werden. Beispiel Im Basisverzeichnis befindet sich eine Datei namens \"solarpy-default.cfg\". Sie kann als Basis f\u00fcr eine eigene Konfigurationsdatei dienen. [program] #If no logfile is given, logging to stdout and stderror #logfile=./solarpy.log #logbackupcount=3 #How to get PV-Data: restapi, ifcardeasy, simulation #datasource=ifcardeasy #datasource=restapi datasource=simulation [fronius] comport=COM3 baudrate=19200 [restapi] host=http://127.0.0.1 url=/rawdata.html [weather] #set to False to switch weather feature off enabled=False url=http://127.0.0.1/weatherdata.txt user=user password=<secret> #the height of the weatherstation in meter wsheight=222 [influx] #set to False to switch influxdb feature off enabled=True host=127.0.0.1 port=8086 user=admin password=secret database=pvtest #Intervall for saving data in seconds. Set to 0 to turn off saving in intervalls. interval=120 [mysql] enabled = True host=127.0.0.1 port=3306 user=user password=secret database=pvtest tablename=Data #Intervall for saving data in seconds. Set to 0 to turn off saving in intervalls. interval=120 [mqtt] #set to False to switch mqtt feature off enabled=True broker=test.mosquitto.org id=SolarPyDefault1 port=1880 user=user password=secret #Intervall for saving data in seconds. Set to 0 to turn off saving in intervalls. interval=120 keepalive=60 basetopic=solarpy/pv000001/ [httpserver] enabled=True srvaddress=127.0.0.1 port=8080 directory=./templates [webcam] enabled=True url=http://localhost:80/image.jpg #username=admin #password=secret saveinterval=120 ttffile=./Roboto-Regular.ttf savedirectory=./templates/public/webcam/","title":"Configuration"},{"location":"configuration/#konfiguration","text":"SolarPy kann umfangreich konfiguriert werden. Alle m\u00f6glichen Parameter sind sowohl als Commandline Argument, als auch in der Konfigurationsdatei einstellbar.","title":"Konfiguration"},{"location":"configuration/#commandline-arguments","text":">python ./SolarPy.py --help usage: SolarPy.py [-h] [-cf CONFIGFILE] [-lf LOGFILE] [-lbc LOGBACKUPCOUNT] [-ds DATASOURCE] [-c COMPORT] [-rh RESTHOST] [-ru RESTURL] [-hse HTTPSRVENABLED] [-hsa HTTPSRVADDRESS] [-hsp HTTPSRVPORT] [-hsd HTTPSRVDIRECTORY] [-ixen INFLUXENABLED] [-ixh INFLUXHOST] [-ixp INFLUXPORT] [-ixu INFLUXUSER] [-ixpw INFLUXPASSWORD] [-idb INFLUXDATABASE] [-ii INFLUXINTERVAL] [-mysen MYSQLENABLED] [-mysh MYSQLHOST] [-mysp MYSQLPORT] [-mysu MYSQLUSER] [-myspw MYSQLPASSWORD] [-mysdb MYSQLDATABASE] [-myst MYSQLTABLENAME] [-mysi MYSQLINTERVAL] [-men MQTTENABLED] [-mb MQTTBROKER] [-mp MQTTPORT] [-mid MQTTID] [-mu MQTTUSER] [-mpw MQTTPASSWORD] [-mbt MQTTBASETOPIC] [-mbi MQTTINTERVAL] [-mka MQTTKEEPALIVE] [-wcen WEBCAMENABLED] [-wcurl WEBCAMURL] [-wcu WEBCAMUSERNAME] [-wcpw WEBCAMPASSWORD] [-wci WEBCAMSAVEINTERVAL] [-wct WEBCAMTTFFILE] [-wcsd WEBCAMSAVEDIRECTORY] [-wten WEATHERENABLE] [-wturl WEATHERURL] [-wtuser WEATHERUSER] [-wtpw WEATHERPASSWORD] [-wtheight WEATHERSTATIONHEIGHT] optional arguments: -h, --help show this help message and exit -cf CONFIGFILE, --configfile CONFIGFILE Name and path for config file -lf LOGFILE, --logfile LOGFILE Name and path for log file -lbc LOGBACKUPCOUNT, --logbackupcount LOGBACKUPCOUNT How much logfiles to keep -ds DATASOURCE, --datasource DATASOURCE How to get PV-Data [restapi, ifcardeasy, simulation] -c COMPORT, --comport COMPORT On witch ComPort is the IFCard connected -rh RESTHOST, --resthost RESTHOST Host address for RESTApi -ru RESTURL, --resturl RESTURL URL for RESTApi -hse HTTPSRVENABLED, --httpsrvenabled HTTPSRVENABLED http server enabled -hsa HTTPSRVADDRESS, --httpsrvaddress HTTPSRVADDRESS http server address -hsp HTTPSRVPORT, --httpsrvport HTTPSRVPORT http server port -hsd HTTPSRVDIRECTORY, --httpsrvdirectory HTTPSRVDIRECTORY http server directory -ixen INFLUXENABLED, --influxenabled INFLUXENABLED influxdb enabled [True,False] -ixh INFLUXHOST, --influxhost INFLUXHOST influxdb url/hostname -ixp INFLUXPORT, --influxport INFLUXPORT influxdb port -ixu INFLUXUSER, --influxuser INFLUXUSER influxdb username -ixpw INFLUXPASSWORD, --influxpassword INFLUXPASSWORD influxdb password -idb INFLUXDATABASE, --influxdatabase INFLUXDATABASE influxdb database name -ii INFLUXINTERVAL, --influxinterval INFLUXINTERVAL influxdb data send interval -mysen MYSQLENABLED, --mysqlenabled MYSQLENABLED MySQL enabled [True, False] -mysh MYSQLHOST, --mysqlhost MYSQLHOST MySQL url/host -mysp MYSQLPORT, --mysqlport MYSQLPORT MySQL port -mysu MYSQLUSER, --mysqluser MYSQLUSER MySQL username -myspw MYSQLPASSWORD, --mysqlpassword MYSQLPASSWORD MySQL password -mysdb MYSQLDATABASE, --mysqldatabase MYSQLDATABASE MySQL database name -myst MYSQLTABLENAME, --mysqltablename MYSQLTABLENAME MySQL Table name -mysi MYSQLINTERVAL, --mysqlinterval MYSQLINTERVAL MySQL send interval -men MQTTENABLED, --mqttenabled MQTTENABLED mqtt enabled [True,False] -mb MQTTBROKER, --mqttbroker MQTTBROKER url for mqttbroker -mp MQTTPORT, --mqttport MQTTPORT port for mqttbroker -mid MQTTID, --mqttid MQTTID id for mqttbroker -mu MQTTUSER, --mqttuser MQTTUSER user for mqttbroker -mpw MQTTPASSWORD, --mqttpassword MQTTPASSWORD password for mqttbroker -mbt MQTTBASETOPIC, --mqttbasetopic MQTTBASETOPIC basetopic for mqtt -mbi MQTTINTERVAL, --mqttinterval MQTTINTERVAL data send interval for mqtt -mka MQTTKEEPALIVE, --mqttkeepalive MQTTKEEPALIVE keepalive time for mqtt -wcen WEBCAMENABLED, --webcamenabled WEBCAMENABLED webcam processing enabled -wcurl WEBCAMURL, --webcamurl WEBCAMURL webcam URL -wcu WEBCAMUSERNAME, --webcamusername WEBCAMUSERNAME webcam username -wcpw WEBCAMPASSWORD, --webcampassword WEBCAMPASSWORD webcam password -wci WEBCAMSAVEINTERVAL, --webcamsaveinterval WEBCAMSAVEINTERVAL webcam interval to save pictures -wct WEBCAMTTFFILE, --webcamttffile WEBCAMTTFFILE webcam True-Type font file -wcsd WEBCAMSAVEDIRECTORY, --webcamsavedirectory WEBCAMSAVEDIRECTORY webcam directory for saved pictures -wten WEATHERENABLE, --weatherenable WEATHERENABLE Get weather enabled -wturl WEATHERURL, --weatherurl WEATHERURL Get weather data url -wtuser WEATHERUSER, --weatheruser WEATHERUSER Get weather username -wtpw WEATHERPASSWORD, --weatherpassword WEATHERPASSWORD Get weather password -wtheight WEATHERSTATIONHEIGHT, --weatherstationheight WEATHERSTATIONHEIGHT Height of the weatherstation over NN","title":"Commandline Arguments"},{"location":"configuration/#konfigurationsdatei","text":"Als Standard Name f\u00fcr die Konfigurationsdatei wird \"solarpy.cfg\" im gleichen Verzeichnis wie die Programmdatei verwendet. Per Kommandozeile kann dieser jedoch ge\u00e4ndert werden.","title":"Konfigurationsdatei"},{"location":"configuration/#beispiel","text":"Im Basisverzeichnis befindet sich eine Datei namens \"solarpy-default.cfg\". Sie kann als Basis f\u00fcr eine eigene Konfigurationsdatei dienen. [program] #If no logfile is given, logging to stdout and stderror #logfile=./solarpy.log #logbackupcount=3 #How to get PV-Data: restapi, ifcardeasy, simulation #datasource=ifcardeasy #datasource=restapi datasource=simulation [fronius] comport=COM3 baudrate=19200 [restapi] host=http://127.0.0.1 url=/rawdata.html [weather] #set to False to switch weather feature off enabled=False url=http://127.0.0.1/weatherdata.txt user=user password=<secret> #the height of the weatherstation in meter wsheight=222 [influx] #set to False to switch influxdb feature off enabled=True host=127.0.0.1 port=8086 user=admin password=secret database=pvtest #Intervall for saving data in seconds. Set to 0 to turn off saving in intervalls. interval=120 [mysql] enabled = True host=127.0.0.1 port=3306 user=user password=secret database=pvtest tablename=Data #Intervall for saving data in seconds. Set to 0 to turn off saving in intervalls. interval=120 [mqtt] #set to False to switch mqtt feature off enabled=True broker=test.mosquitto.org id=SolarPyDefault1 port=1880 user=user password=secret #Intervall for saving data in seconds. Set to 0 to turn off saving in intervalls. interval=120 keepalive=60 basetopic=solarpy/pv000001/ [httpserver] enabled=True srvaddress=127.0.0.1 port=8080 directory=./templates [webcam] enabled=True url=http://localhost:80/image.jpg #username=admin #password=secret saveinterval=120 ttffile=./Roboto-Regular.ttf savedirectory=./templates/public/webcam/","title":"Beispiel"},{"location":"outputs/","text":"Ausgabe Module Http-Server mit REST-API Templates Der interne Webserver kann - sofern enabled - \u00fcber die konfigurierte Adresse aufgerufen werden: Per default ist das: http://localhost:8080/ Der Inhalt dieser Seite kann den eigenen Bed\u00fcrfnissen angepasst werden (template/index.html). Folgende Tags werden durch aktuelle Daten ersetzt: Tag Beschreibung Beispiel {{pvdata.ActiveInvCnt}} tbd. {{pvdata.ActiveSensorCardCnt}} tbd. {{pvdata.DevTime}} tbd. {{pvdata.Error}} tbd. {{pvdata.LocalNetStatus}} tbd. {{pvdata.PDayTotal}} tbd. {{pvdata.PTotal}} tbd. {{pvdata.Time}} Messzeit als Timestamp 1578383866.0 {{pvdata.VersionIFC}} tbd. {{pvdata.wr0.DevType}} tbd. {{pvdata.wr0.FAC}} tbd. {{pvdata.wr0.IAC}} tbd. {{pvdata.wr0.IDC}} tbd. {{pvdata.wr0.OHDAY}} tbd. {{pvdata.wr0.OHTOT}} tbd. {{pvdata.wr0.OHYEAR}} tbd. {{pvdata.wr0.PDay}} tbd. {{pvdata.wr0.PNow}} tbd. {{pvdata.wr0.UAC}} tbd. {{pvdata.wr0.UDC}} tbd. {{pvdata.wr1.DevType}} tbd. {{pvdata.wr1.FAC}} tbd. {{pvdata.wr1.IAC}} tbd. {{pvdata.wr1.IDC}} tbd. {{pvdata.wr1.OHDAY}} tbd. {{pvdata.wr1.OHTOT}} tbd. {{pvdata.wr1.OHYEAR}} tbd. {{pvdata.wr1.PDay}} tbd. {{pvdata.wr1.PNow}} tbd. {{pvdata.wr1.UAC}} tbd. {{pvdata.wr1.UDC}} tbd. {{weatherdata.Error}} tbd. {{weatherdata.Hin}} tbd. {{weatherdata.Hout}} tbd. {{weatherdata.MeasureTime}} tbd. {{weatherdata.PressureAbs}} tbd. {{weatherdata.PressureRel}} tbd. {{weatherdata.Rain1h}} tbd. {{weatherdata.Rain24h}} tbd. {{weatherdata.RainTotal}} tbd. {{weatherdata.State}} tbd. {{weatherdata.Tin}} tbd. {{weatherdata.Tout}} tbd. {{weatherdata.Wind}} tbd. {{weatherdata.WindAvg}} tbd. {{weatherdata.WindDir}} tbd. {{weatherdata.WindGust}} tbd. {{pvdata.Time.text}} pvdata.Time als Text '2020-01-23 08:43:07' {{replacetags.version}} Version der Tag Ersetzung '1.0.0' Daten Photovoltaik Anlage Unter http://localhost:8080/pvdata.json k\u00f6nnen die aktuellen Daten der Solaranlage abgefragt werden. Man erh\u00e4lt eine JSON-Datei mit dieser Struktur: { \"ActiveInvCnt\": 258, \"ActiveSensorCardCnt\": 0, \"DevTime\": \"7.1.20T13:56:29\", \"Error\": \"OK\", \"LocalNetStatus\": 1, \"PDayTotal\": 2000, \"PTotal\": 859, \"Time\": 1578401760.712453, \"VersionIFC\": [1, 1, 1, 0], \"wr\": [{ \"DevType\": 250, \"EFF\": 0.903, \"FAC\": 50.0, \"IAC\": 1.58, \"IDC\": 1.52, \"OHDAY\": 272, \"OHTOT\": 272, \"OHYEAR\": 2706, \"PDay\": 1000, \"PNow\": 367, \"UAC\": 232, \"UDC\": 267 }, { \"DevType\": 250, \"EFF\": 0.907, \"FAC\": 50.0, \"IAC\": 2.14, \"IDC\": 2.18, \"OHDAY\": 283, \"OHTOT\": 283, \"OHYEAR\": 2777, \"PDay\": 1000, \"PNow\": 492, \"UAC\": 230, \"UDC\": 249 } ] } Daten des Hostsystems Unter http://localhost:8080/osdata.json k\u00f6nnen die aktuellen Daten des Host Systems abgefragt werden. Man erh\u00e4lt eine JSON-Datei mit dieser Struktur: { \"BootTime\": 1578298334.0, \"Cpu\": 17.6, \"CpuFreq\": { \"current\": 1596.0, \"min\": 0.0, \"max\": 1596.0 }, \"Memory\": { \"total\": 1064689664, \"available\": 286121984, \"percent\": 73.1, \"used\": 778567680, \"free\": 286121984 }, \"Network\": { \"bytes_sent\": 3558595771, \"bytes_recv\": 958812200, \"packets_sent\": 4336624, \"packets_recv\": 4099384, \"errin\": 0, \"errout\": 0, \"dropin\": 0, \"dropout\": 0 }, \"PsUtilVersion\": [5, 6, 7], \"Temperatures\": 0 } Die Struktur kann unter Linux etwas anders aussehen Wetterdaten Unter http://localhost:8080/wsdata.json k\u00f6nnen die aktuellen Daten der Wetterstation abgefragt werden. Man erh\u00e4lt eine JSON-Datei mit dieser Struktur: { \"Error\": \"OK\", \"Hin\": 37.0, \"Hout\": 94.0, \"MeasureTime\": 1578402134.0, \"PressureAbs\": 1033.3, \"PressureRel\": 1033.3, \"Rain1h\": 0.0, \"Rain24h\": 0.0, \"RainTotal\": 3.9, \"State\": 0.0, \"Tin\": 23.5, \"Tout\": 5.5, \"Wind\": 1.4, \"WindAvg\": 0, \"WindDir\": 180.0, \"WindGust\": 2.0 } Die Daten werde per Http von einem anderen System abgefragt. Webcam Sofern das Bild einer Webcam per URL abgefragt werden kann (z.B. http://www.example.com:80/img/ipcam.jpg ) , ist es m\u00f6glich in das Bild die Daten der PV-Anlage zu implementieren. Das modifizierte Webcam Bild kann dann \u00fcber den integrierten Webserver abgefragt werden (url: http://localhost:8080/img/pvipcam.jpg)). Wenn gew\u00fcscht kann in konfigurierbaren Intervallen ein Bild gespeichert werden. Aus dieser Bilderserie kann dann zb. mit ffmpeg ein Video generiert werden, was den Tagesverlauf der Beschattung auf den Solarpanelen zeigt. InfluxDB In konfigurierbaren Intervallen k\u00f6nnen die ermittelten Daten in einer Influx Datenbank gespeichert werden. Allgemein Starten der influxdb shell influx Authentifizieren und Datenbank selektieren > auth username: admin password: > > show databases name: databases name ---- _internal MeteringData WeatherData telegraf iobroker Energie PVAnlage pvtest > Datenbankstruktur F\u00fcr die PV-Anlage existieren 2 Datenbanken: MeteringData PVAnlage In der Datenbank \"MeteringData\" werden die Echtzeitdaten gespeichert. Die Datenbank \"PVAnlage\" beinhaltet die Akkumulierten Werte MeteringData > use MeteringData Using database MeteringData > > show measurements name: measurements name ---- PVAnlage > show field keys name: PVAnlage fieldKey fieldType -------- --------- PDay float PNow float WR1ACANow float WR1ACHzNow float WR1ACVNow float WR1DCANow float WR1DCVNow float WR1WDay float WR1WNow float WR2ACANow float WR2ACHzNow float WR2ACVNow float WR2DCANow float WR2DCVNow float WR2WDay float WR2WNow float > PVAnlage > use PVAnlage Using database PVAnlage > > show measurements name: measurements name ---- DayPower > > show field keys name: DayPower fieldKey fieldType -------- --------- max float > Kopieren der Tagesh\u00f6hstwerte in andere Datenbank > use MeteringData Using database MeteringData > select max(PDay) into PVAnlage.autogen.DayPower from PVAnlage group by time(1d) name: result time written ---- ------- 0 4813 > Als Continuous Querry: use MeteringData CREATE CONTINUOUS QUERY MaxPDay ON MeteringData BEGIN select max(PDay) into PVAnlage.autogen.DayPower from PVAnlage group by time(1d) END Zusammenfassen der Tageswerte zu Monatswerten > use PVAnlage >select sum(max) into PVAnlage.autogen.MonthPower from DayPower group by time(30d) name: result time written ---- ------- 0 163 > Als Continuous Querry: use PVAnlage CREATE CONTINUOUS QUERY SumMonth ON PVAnlage BEGIN select sum(max) into PVAnlage.autogen.MonthPower from DayPower group by time(30d) END Monatswerte zu Jahreswerten >select sum(sum) into PVAnlage.autogen.YearPower from MonthPower group by time(52w) name: result time written ---- ------- 0 15 > Als Continuous Querry: use PVAnlage CREATE CONTINUOUS QUERY SumYear ON PVAnlage BEGIN select sum(sum) into PVAnlage.autogen.YearPower from MonthPower group by time(52w) END MySQL In konfigurierbaren Intervallen k\u00f6nnen die ermittelten Daten in einer MySQL / MariaDB Datenbank gespeichert werden.","title":"Outputs"},{"location":"outputs/#ausgabe-module","text":"","title":"Ausgabe Module"},{"location":"outputs/#http-server-mit-rest-api","text":"","title":"Http-Server mit REST-API"},{"location":"outputs/#templates","text":"Der interne Webserver kann - sofern enabled - \u00fcber die konfigurierte Adresse aufgerufen werden: Per default ist das: http://localhost:8080/ Der Inhalt dieser Seite kann den eigenen Bed\u00fcrfnissen angepasst werden (template/index.html). Folgende Tags werden durch aktuelle Daten ersetzt: Tag Beschreibung Beispiel {{pvdata.ActiveInvCnt}} tbd. {{pvdata.ActiveSensorCardCnt}} tbd. {{pvdata.DevTime}} tbd. {{pvdata.Error}} tbd. {{pvdata.LocalNetStatus}} tbd. {{pvdata.PDayTotal}} tbd. {{pvdata.PTotal}} tbd. {{pvdata.Time}} Messzeit als Timestamp 1578383866.0 {{pvdata.VersionIFC}} tbd. {{pvdata.wr0.DevType}} tbd. {{pvdata.wr0.FAC}} tbd. {{pvdata.wr0.IAC}} tbd. {{pvdata.wr0.IDC}} tbd. {{pvdata.wr0.OHDAY}} tbd. {{pvdata.wr0.OHTOT}} tbd. {{pvdata.wr0.OHYEAR}} tbd. {{pvdata.wr0.PDay}} tbd. {{pvdata.wr0.PNow}} tbd. {{pvdata.wr0.UAC}} tbd. {{pvdata.wr0.UDC}} tbd. {{pvdata.wr1.DevType}} tbd. {{pvdata.wr1.FAC}} tbd. {{pvdata.wr1.IAC}} tbd. {{pvdata.wr1.IDC}} tbd. {{pvdata.wr1.OHDAY}} tbd. {{pvdata.wr1.OHTOT}} tbd. {{pvdata.wr1.OHYEAR}} tbd. {{pvdata.wr1.PDay}} tbd. {{pvdata.wr1.PNow}} tbd. {{pvdata.wr1.UAC}} tbd. {{pvdata.wr1.UDC}} tbd. {{weatherdata.Error}} tbd. {{weatherdata.Hin}} tbd. {{weatherdata.Hout}} tbd. {{weatherdata.MeasureTime}} tbd. {{weatherdata.PressureAbs}} tbd. {{weatherdata.PressureRel}} tbd. {{weatherdata.Rain1h}} tbd. {{weatherdata.Rain24h}} tbd. {{weatherdata.RainTotal}} tbd. {{weatherdata.State}} tbd. {{weatherdata.Tin}} tbd. {{weatherdata.Tout}} tbd. {{weatherdata.Wind}} tbd. {{weatherdata.WindAvg}} tbd. {{weatherdata.WindDir}} tbd. {{weatherdata.WindGust}} tbd. {{pvdata.Time.text}} pvdata.Time als Text '2020-01-23 08:43:07' {{replacetags.version}} Version der Tag Ersetzung '1.0.0'","title":"Templates"},{"location":"outputs/#daten","text":"","title":"Daten"},{"location":"outputs/#photovoltaik-anlage","text":"Unter http://localhost:8080/pvdata.json k\u00f6nnen die aktuellen Daten der Solaranlage abgefragt werden. Man erh\u00e4lt eine JSON-Datei mit dieser Struktur: { \"ActiveInvCnt\": 258, \"ActiveSensorCardCnt\": 0, \"DevTime\": \"7.1.20T13:56:29\", \"Error\": \"OK\", \"LocalNetStatus\": 1, \"PDayTotal\": 2000, \"PTotal\": 859, \"Time\": 1578401760.712453, \"VersionIFC\": [1, 1, 1, 0], \"wr\": [{ \"DevType\": 250, \"EFF\": 0.903, \"FAC\": 50.0, \"IAC\": 1.58, \"IDC\": 1.52, \"OHDAY\": 272, \"OHTOT\": 272, \"OHYEAR\": 2706, \"PDay\": 1000, \"PNow\": 367, \"UAC\": 232, \"UDC\": 267 }, { \"DevType\": 250, \"EFF\": 0.907, \"FAC\": 50.0, \"IAC\": 2.14, \"IDC\": 2.18, \"OHDAY\": 283, \"OHTOT\": 283, \"OHYEAR\": 2777, \"PDay\": 1000, \"PNow\": 492, \"UAC\": 230, \"UDC\": 249 } ] }","title":"Photovoltaik Anlage"},{"location":"outputs/#daten-des-hostsystems","text":"Unter http://localhost:8080/osdata.json k\u00f6nnen die aktuellen Daten des Host Systems abgefragt werden. Man erh\u00e4lt eine JSON-Datei mit dieser Struktur: { \"BootTime\": 1578298334.0, \"Cpu\": 17.6, \"CpuFreq\": { \"current\": 1596.0, \"min\": 0.0, \"max\": 1596.0 }, \"Memory\": { \"total\": 1064689664, \"available\": 286121984, \"percent\": 73.1, \"used\": 778567680, \"free\": 286121984 }, \"Network\": { \"bytes_sent\": 3558595771, \"bytes_recv\": 958812200, \"packets_sent\": 4336624, \"packets_recv\": 4099384, \"errin\": 0, \"errout\": 0, \"dropin\": 0, \"dropout\": 0 }, \"PsUtilVersion\": [5, 6, 7], \"Temperatures\": 0 } Die Struktur kann unter Linux etwas anders aussehen","title":"Daten des Hostsystems"},{"location":"outputs/#wetterdaten","text":"Unter http://localhost:8080/wsdata.json k\u00f6nnen die aktuellen Daten der Wetterstation abgefragt werden. Man erh\u00e4lt eine JSON-Datei mit dieser Struktur: { \"Error\": \"OK\", \"Hin\": 37.0, \"Hout\": 94.0, \"MeasureTime\": 1578402134.0, \"PressureAbs\": 1033.3, \"PressureRel\": 1033.3, \"Rain1h\": 0.0, \"Rain24h\": 0.0, \"RainTotal\": 3.9, \"State\": 0.0, \"Tin\": 23.5, \"Tout\": 5.5, \"Wind\": 1.4, \"WindAvg\": 0, \"WindDir\": 180.0, \"WindGust\": 2.0 } Die Daten werde per Http von einem anderen System abgefragt.","title":"Wetterdaten"},{"location":"outputs/#webcam","text":"Sofern das Bild einer Webcam per URL abgefragt werden kann (z.B. http://www.example.com:80/img/ipcam.jpg ) , ist es m\u00f6glich in das Bild die Daten der PV-Anlage zu implementieren. Das modifizierte Webcam Bild kann dann \u00fcber den integrierten Webserver abgefragt werden (url: http://localhost:8080/img/pvipcam.jpg)). Wenn gew\u00fcscht kann in konfigurierbaren Intervallen ein Bild gespeichert werden. Aus dieser Bilderserie kann dann zb. mit ffmpeg ein Video generiert werden, was den Tagesverlauf der Beschattung auf den Solarpanelen zeigt.","title":"Webcam"},{"location":"outputs/#influxdb","text":"In konfigurierbaren Intervallen k\u00f6nnen die ermittelten Daten in einer Influx Datenbank gespeichert werden.","title":"InfluxDB"},{"location":"outputs/#allgemein","text":"Starten der influxdb shell influx Authentifizieren und Datenbank selektieren > auth username: admin password: > > show databases name: databases name ---- _internal MeteringData WeatherData telegraf iobroker Energie PVAnlage pvtest >","title":"Allgemein"},{"location":"outputs/#datenbankstruktur","text":"F\u00fcr die PV-Anlage existieren 2 Datenbanken: MeteringData PVAnlage In der Datenbank \"MeteringData\" werden die Echtzeitdaten gespeichert. Die Datenbank \"PVAnlage\" beinhaltet die Akkumulierten Werte","title":"Datenbankstruktur"},{"location":"outputs/#meteringdata","text":"> use MeteringData Using database MeteringData > > show measurements name: measurements name ---- PVAnlage > show field keys name: PVAnlage fieldKey fieldType -------- --------- PDay float PNow float WR1ACANow float WR1ACHzNow float WR1ACVNow float WR1DCANow float WR1DCVNow float WR1WDay float WR1WNow float WR2ACANow float WR2ACHzNow float WR2ACVNow float WR2DCANow float WR2DCVNow float WR2WDay float WR2WNow float >","title":"MeteringData"},{"location":"outputs/#pvanlage","text":"> use PVAnlage Using database PVAnlage > > show measurements name: measurements name ---- DayPower > > show field keys name: DayPower fieldKey fieldType -------- --------- max float > Kopieren der Tagesh\u00f6hstwerte in andere Datenbank > use MeteringData Using database MeteringData > select max(PDay) into PVAnlage.autogen.DayPower from PVAnlage group by time(1d) name: result time written ---- ------- 0 4813 > Als Continuous Querry: use MeteringData CREATE CONTINUOUS QUERY MaxPDay ON MeteringData BEGIN select max(PDay) into PVAnlage.autogen.DayPower from PVAnlage group by time(1d) END Zusammenfassen der Tageswerte zu Monatswerten > use PVAnlage >select sum(max) into PVAnlage.autogen.MonthPower from DayPower group by time(30d) name: result time written ---- ------- 0 163 > Als Continuous Querry: use PVAnlage CREATE CONTINUOUS QUERY SumMonth ON PVAnlage BEGIN select sum(max) into PVAnlage.autogen.MonthPower from DayPower group by time(30d) END Monatswerte zu Jahreswerten >select sum(sum) into PVAnlage.autogen.YearPower from MonthPower group by time(52w) name: result time written ---- ------- 0 15 > Als Continuous Querry: use PVAnlage CREATE CONTINUOUS QUERY SumYear ON PVAnlage BEGIN select sum(sum) into PVAnlage.autogen.YearPower from MonthPower group by time(52w) END","title":"PVAnlage"},{"location":"outputs/#mysql","text":"In konfigurierbaren Intervallen k\u00f6nnen die ermittelten Daten in einer MySQL / MariaDB Datenbank gespeichert werden.","title":"MySQL"},{"location":"setup/","text":"Setup SolarPy holen ein Verzeichnis erzeugen und darin mittels git clone https://github.com/cszielke/SolarPy.git das Repository klonen. Anschlie\u00dfend setup.bat f\u00fcr Windows, oder setup.sh f\u00fcr linux aufrufen um die Abh\u00e4ngigkeiten zu installieren. F\u00fcr die Konfiguration des Programms die Datei ./solarpy-default.cfg nach ./solarpy.cfg kopieren und anpassen. Das Programm kann mit python ./SolarPy.py gestartet werden. Upate Um das Programm upzudaten folgende Befehle eingeben: git fetch origin git reset --hard origin/master sudo /etc/init.d/solarpy restart Die Datei solarpy.cfg wird nicht \u00fcberschrieben. Start als deamon unter Linux Um SolarPy als Deamon im Hintergrund zu starten wird das Programm start-stop-daemon verwendet. SolarPy sollte im Verzeichnis /usr/local/bin/SolarPy liegen. Man erzeugt eine Datei solarpy im Verzeichnis /etc/init.d (Rechte nicht vergessen!) mit folgendem Inhalt: #!/bin/sh ### BEGIN INIT INFO # Provides: myservice # Required-Start: $remote_fs $syslog # Required-Stop: $remote_fs $syslog # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Put a short description of the service here # Description: Put a long description of the service here ### END INIT INFO # Change the next 3 lines to suit where you install your script and what you want to call it DIR=/usr/local/bin/SolarPy DAEMON=$DIR/SolarPy.py DAEMON_NAME=SolarPy # Add any command line options for your daemon here DAEMON_OPTS=\" -cf /etc/solarpy.cfg\" # This next line determines what user the script runs as. # Root generally not recommended but necessary if you are using the Raspberry Pi GPIO from Python. DAEMON_USER=root # The process ID of the script when it runs is stored here: PIDFILE=/var/run/$DAEMON_NAME.pid . /lib/lsb/init-functions do_start () { log_daemon_msg \"Starting system $DAEMON_NAME daemon\" start-stop-daemon --start --background --pidfile $PIDFILE --make-pidfile --user $DAEMON_USER --chuid $DAEMON_USER --startas $DAEMON -- $DAEMON_OPTS log_end_msg $? } do_stop () { log_daemon_msg \"Stopping system $DAEMON_NAME daemon\" start-stop-daemon --stop --pidfile $PIDFILE --retry 10 log_end_msg $? } case \"$1\" in start|stop) do_${1} ;; restart|reload|force-reload) do_stop do_start ;; status) status_of_proc \"$DAEMON_NAME\" \"$DAEMON\" && exit 0 || exit $? ;; *) echo \"Usage: /etc/init.d/$DAEMON_NAME {start|stop|restart|status}\" exit 1 ;; esac exit 0 Um das Script zur richtigen Zeit automatisch zu starten, muss noch folgender Befehl ausgef\u00fchrt werden: sudo update-rc.d myservice.sh defaults Dieser Befehl f\u00fcgt die entsprechenden symbolischen Links in /etc/rc?.d Verzeichnissen hinzu. Info von http://blog.scphillips.com/posts/2013/07/getting-a-python-script-to-run-in-the-background-as-a-service-on-boot/ Raspberry mit read-only Filesystem Wenn das System, auf dem SolayPy l\u00e4uft, ein read-only Filesystem hat, dann kann kein Log-File geschrieben werden. Auch das Speichern von Webcam Bildern funktioniert dann nicht. Man kann nat\u00fcrlich ein freigegebenes Verzeichnis einer externen NAS oder eines externen Servers in das Filesystem des Raspberrys einbinden. Dazu muss das externe Verzeichnis in ein locales Verzeichnis gemountet werden. Dazu wird in die Datei /etc/fstab an das Ende folgendes eingetragen: //192.168.15.107/web /var/nas cifs defaults,uid=1000,username=pi,password=<MeinPasswortFuerDenUserPi> 0 0 Das bewirkt, dass bereits beim Start des Raspberry in das Verzeichnis /var/nas die externe Netzwerkfreigabe //192.168.15.107/web eingebunden wird. Hier k\u00f6nnen jetzt Webcambilder und Log-File geschrieben werden.","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#solarpy-holen","text":"ein Verzeichnis erzeugen und darin mittels git clone https://github.com/cszielke/SolarPy.git das Repository klonen. Anschlie\u00dfend setup.bat f\u00fcr Windows, oder setup.sh f\u00fcr linux aufrufen um die Abh\u00e4ngigkeiten zu installieren. F\u00fcr die Konfiguration des Programms die Datei ./solarpy-default.cfg nach ./solarpy.cfg kopieren und anpassen. Das Programm kann mit python ./SolarPy.py gestartet werden.","title":"SolarPy holen"},{"location":"setup/#upate","text":"Um das Programm upzudaten folgende Befehle eingeben: git fetch origin git reset --hard origin/master sudo /etc/init.d/solarpy restart Die Datei solarpy.cfg wird nicht \u00fcberschrieben.","title":"Upate"},{"location":"setup/#start-als-deamon-unter-linux","text":"Um SolarPy als Deamon im Hintergrund zu starten wird das Programm start-stop-daemon verwendet. SolarPy sollte im Verzeichnis /usr/local/bin/SolarPy liegen. Man erzeugt eine Datei solarpy im Verzeichnis /etc/init.d (Rechte nicht vergessen!) mit folgendem Inhalt: #!/bin/sh ### BEGIN INIT INFO # Provides: myservice # Required-Start: $remote_fs $syslog # Required-Stop: $remote_fs $syslog # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Put a short description of the service here # Description: Put a long description of the service here ### END INIT INFO # Change the next 3 lines to suit where you install your script and what you want to call it DIR=/usr/local/bin/SolarPy DAEMON=$DIR/SolarPy.py DAEMON_NAME=SolarPy # Add any command line options for your daemon here DAEMON_OPTS=\" -cf /etc/solarpy.cfg\" # This next line determines what user the script runs as. # Root generally not recommended but necessary if you are using the Raspberry Pi GPIO from Python. DAEMON_USER=root # The process ID of the script when it runs is stored here: PIDFILE=/var/run/$DAEMON_NAME.pid . /lib/lsb/init-functions do_start () { log_daemon_msg \"Starting system $DAEMON_NAME daemon\" start-stop-daemon --start --background --pidfile $PIDFILE --make-pidfile --user $DAEMON_USER --chuid $DAEMON_USER --startas $DAEMON -- $DAEMON_OPTS log_end_msg $? } do_stop () { log_daemon_msg \"Stopping system $DAEMON_NAME daemon\" start-stop-daemon --stop --pidfile $PIDFILE --retry 10 log_end_msg $? } case \"$1\" in start|stop) do_${1} ;; restart|reload|force-reload) do_stop do_start ;; status) status_of_proc \"$DAEMON_NAME\" \"$DAEMON\" && exit 0 || exit $? ;; *) echo \"Usage: /etc/init.d/$DAEMON_NAME {start|stop|restart|status}\" exit 1 ;; esac exit 0 Um das Script zur richtigen Zeit automatisch zu starten, muss noch folgender Befehl ausgef\u00fchrt werden: sudo update-rc.d myservice.sh defaults Dieser Befehl f\u00fcgt die entsprechenden symbolischen Links in /etc/rc?.d Verzeichnissen hinzu. Info von http://blog.scphillips.com/posts/2013/07/getting-a-python-script-to-run-in-the-background-as-a-service-on-boot/","title":"Start als deamon unter Linux"},{"location":"setup/#raspberry-mit-read-only-filesystem","text":"Wenn das System, auf dem SolayPy l\u00e4uft, ein read-only Filesystem hat, dann kann kein Log-File geschrieben werden. Auch das Speichern von Webcam Bildern funktioniert dann nicht. Man kann nat\u00fcrlich ein freigegebenes Verzeichnis einer externen NAS oder eines externen Servers in das Filesystem des Raspberrys einbinden. Dazu muss das externe Verzeichnis in ein locales Verzeichnis gemountet werden. Dazu wird in die Datei /etc/fstab an das Ende folgendes eingetragen: //192.168.15.107/web /var/nas cifs defaults,uid=1000,username=pi,password=<MeinPasswortFuerDenUserPi> 0 0 Das bewirkt, dass bereits beim Start des Raspberry in das Verzeichnis /var/nas die externe Netzwerkfreigabe //192.168.15.107/web eingebunden wird. Hier k\u00f6nnen jetzt Webcambilder und Log-File geschrieben werden.","title":"Raspberry mit read-only Filesystem"},{"location":"sources/","text":"Quellen Daten der Photovoltaik Anlage Folgende Quellen f\u00fcr die PV-Daten sind M\u00f6glich: Fronius REST-Api Simulation Es darf nur eine der M\u00f6glichkeiten aktiv sein. Welche das ist, kann in der Konfiguration angegeben werden. Fronius \u00dcber eine Serielle Schnittstelle werden die Daten direkt von der InterfaceCard der Fronius Anlage geholt. REST-Api Die Daten werden mittels Http-GET von einem anderen Server geholt. Die kann auch z.B. eine laufende Instanz auf einem Raspberry sein, die die Daten von der Fronius Anlage per Serieller Schnittstelle holt sein. Die Datenstruktur entspricht der Datei rawdata.html im Verzeichnis \"template\". Eine Anpassung an andere HTML Formate ist durch eine Programm\u00e4nderung in der Datei restapi.py m\u00f6glich. Dazu muss lediglich die Funktion \"GetPVDataRestApi\" angepasst werden. Simulation Sollte kein Zugriff auf reale Daten vorhanden sein, kann mit diesen simulierten Daten zumindest das Programm getestet werden Wetter Daten Um in den Ausgabe Modulen Wetter Daten zur Verf\u00fcgung zu stellen, werden diese via REST-Api von einer Wetterstation geholt. Es wird eine Textdatei mit folgendem Inhalt erwartet: DTime 2020-01-09 12:56:55 RHi 40 Ti 23.6 RHo 98 To 9.6 RP 1020.1 WS 1.4 WG 2.0 DIR 180 WDT S Rtot 15.0 R24 10.2 R1H 1.1 state 00 Jede Zeile wird am ersten Leerzeichen in Key und Value getrennt. Welcher Key was bedeutet sollte offensichtlich sein. Daten des Host-Systems SolarPy ermittelt Daten zum Rechner, auf dem es l\u00e4uft und stellt diese \u00fcber die Ausgabemodule zur Verf\u00fcgung.","title":"Sources"},{"location":"sources/#quellen","text":"","title":"Quellen"},{"location":"sources/#daten-der-photovoltaik-anlage","text":"Folgende Quellen f\u00fcr die PV-Daten sind M\u00f6glich: Fronius REST-Api Simulation Es darf nur eine der M\u00f6glichkeiten aktiv sein. Welche das ist, kann in der Konfiguration angegeben werden.","title":"Daten der Photovoltaik Anlage"},{"location":"sources/#fronius","text":"\u00dcber eine Serielle Schnittstelle werden die Daten direkt von der InterfaceCard der Fronius Anlage geholt.","title":"Fronius"},{"location":"sources/#rest-api","text":"Die Daten werden mittels Http-GET von einem anderen Server geholt. Die kann auch z.B. eine laufende Instanz auf einem Raspberry sein, die die Daten von der Fronius Anlage per Serieller Schnittstelle holt sein. Die Datenstruktur entspricht der Datei rawdata.html im Verzeichnis \"template\". Eine Anpassung an andere HTML Formate ist durch eine Programm\u00e4nderung in der Datei restapi.py m\u00f6glich. Dazu muss lediglich die Funktion \"GetPVDataRestApi\" angepasst werden.","title":"REST-Api"},{"location":"sources/#simulation","text":"Sollte kein Zugriff auf reale Daten vorhanden sein, kann mit diesen simulierten Daten zumindest das Programm getestet werden","title":"Simulation"},{"location":"sources/#wetter-daten","text":"Um in den Ausgabe Modulen Wetter Daten zur Verf\u00fcgung zu stellen, werden diese via REST-Api von einer Wetterstation geholt. Es wird eine Textdatei mit folgendem Inhalt erwartet: DTime 2020-01-09 12:56:55 RHi 40 Ti 23.6 RHo 98 To 9.6 RP 1020.1 WS 1.4 WG 2.0 DIR 180 WDT S Rtot 15.0 R24 10.2 R1H 1.1 state 00 Jede Zeile wird am ersten Leerzeichen in Key und Value getrennt. Welcher Key was bedeutet sollte offensichtlich sein.","title":"Wetter Daten"},{"location":"sources/#daten-des-host-systems","text":"SolarPy ermittelt Daten zum Rechner, auf dem es l\u00e4uft und stellt diese \u00fcber die Ausgabemodule zur Verf\u00fcgung.","title":"Daten des Host-Systems"},{"location":"todo/","text":"Todo's Allgemein Eventuell PV- Daten zyklisch holen und nicht auf Anforderung (schnellere Antwortzeit) Zu erwartende Anzahl an Bytes auf der seriellen Schnittstelle (length Byte) ermittlen und bei Erhalt sofort weiter im Programm. Erh\u00f6ht die Geschwindigkeit des Lesens. Konfigurierbarkeit \u00fcber MQTT und Http (Sicherheit?) Http-Server auch \u00fcber https Logging via MQTT/Http PVData ~~Wirkungsgrade der Inverter berechnen~~ Implementiert WeatherData ~~Taupunktberechnung~~ Implementiert ~~Richtungstext Wind~~ Implementiert Windrichtungshistorie (Dir1-5)","title":"Todo"},{"location":"todo/#todos","text":"","title":"Todo's"},{"location":"todo/#allgemein","text":"Eventuell PV- Daten zyklisch holen und nicht auf Anforderung (schnellere Antwortzeit) Zu erwartende Anzahl an Bytes auf der seriellen Schnittstelle (length Byte) ermittlen und bei Erhalt sofort weiter im Programm. Erh\u00f6ht die Geschwindigkeit des Lesens. Konfigurierbarkeit \u00fcber MQTT und Http (Sicherheit?) Http-Server auch \u00fcber https Logging via MQTT/Http","title":"Allgemein"},{"location":"todo/#pvdata","text":"~~Wirkungsgrade der Inverter berechnen~~ Implementiert","title":"PVData"},{"location":"todo/#weatherdata","text":"~~Taupunktberechnung~~ Implementiert ~~Richtungstext Wind~~ Implementiert Windrichtungshistorie (Dir1-5)","title":"WeatherData"},{"location":"tools/","text":"Scripts Erzeugen von Video Dateien Um aus den gespeicherten Bilder eines Tages ein Video zu erstellen, befinden sich im Verzeichnis \"scripts\" zwei PowerShell Scripts: encode_pictures.ps1 (Encodiert das Video mittels ffmpeg) makeallpvvideos.ps1 (Durchsucht die Verzeichnisstruktur nach Bildern) Beispiel .\\makeallpvvideos.ps1 \\\\raspidbsrv\\web\\html\\webcam \\\\raspidbsrv\\web\\html\\webcam\\videos","title":"Tools"},{"location":"tools/#scripts","text":"","title":"Scripts"},{"location":"tools/#erzeugen-von-video-dateien","text":"Um aus den gespeicherten Bilder eines Tages ein Video zu erstellen, befinden sich im Verzeichnis \"scripts\" zwei PowerShell Scripts: encode_pictures.ps1 (Encodiert das Video mittels ffmpeg) makeallpvvideos.ps1 (Durchsucht die Verzeichnisstruktur nach Bildern)","title":"Erzeugen von Video Dateien"},{"location":"tools/#beispiel","text":".\\makeallpvvideos.ps1 \\\\raspidbsrv\\web\\html\\webcam \\\\raspidbsrv\\web\\html\\webcam\\videos","title":"Beispiel"}]}